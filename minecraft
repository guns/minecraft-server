#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2014 Sung Pae <self@sungpae.com>
# Distributed under the MIT license.
# http://www.opensource.org/licenses/mit-license.php

require 'optparse'
require 'json'
require 'fileutils'
require 'pathname'
require 'open3'

class Minecraft
  DEFAULTS = {
    :gamedir => '/srv/games/minecraft',
    :jar     => nil,
    :world   => nil,
    :memory  => 256,
    :debug   => false
  }

  VERSIONS_URL        = 'https://s3.amazonaws.com/Minecraft.Download/versions/versions.json'
  DOWNLOAD_PREFIX_URL = 'https://s3.amazonaws.com/Minecraft.Download/versions'
  OFFICIAL_JAR_REGEXP = /\/?minecraft_server(\.\d)+\.jar\z/
  LOCKFILE            = '.lock'
  PIDFILE             = '.pid'
  FIFO                = '.stdin'

  def initialize opts = {}
    @gamedir, @jar, @world, @memory, @debug =
      DEFAULTS.merge(opts).values_at :gamedir, :jar, :world, :memory, :debug
  end

  def parser
    @parser ||= OptionParser.new nil, 20 do |opt|
      opt.banner = <<-BANNER.gsub /^ {8}/, ''
           _____   ___ _______ ______________________________   _____ _____________________
          /     \\ |   |\\      \\\\_   _____/\\_   ___ \\______   \\ /  _  \\\\_   _____/__    ___/
         /  \\ /  \\|   |/   |   \\|    __)_ /    \\  \\/|       _//  /_\\  \\|    __)   |    |
        /    Y    \\   /    |    \\        \\\\     \\___|    |   \\    |    \\     \\    |    |
        \\____|__  /___\\____|__  /______  / \\______  /____|_  /____|__  /___  /    |____|
                \\/            \\/       \\/         \\/       \\/        \\/    \\/

        Usage: #{File.basename __FILE__} [options] start|stop|restart|update|repl

        Options:
      BANNER

      opt.on '-g', '--gamedir PATH', 'Path to minecraft directory [DEFAULT: %s]' % @gamedir do |arg|
        @gamedir = File.expand_path arg
      end

      opt.on '-j', '--jar PATH', 'Path to server jar' do |arg|
        @jar = File.expand_path arg
      end

      opt.on '-w', '--world NAME', 'Name of world to play; creates new world if not found' do |arg|
        @world = arg
      end

      opt.on '-m', '--memory SIZE', Integer, 'Memory in MB [DEFAULT: %d]' % @memory do |arg|
        @memory = arg
      end

      opt.on '-d', '--debug', 'Keep server process in foreground' do
        @debug = true
      end
    end
  end

  #
  # Updating
  #

  # We are using cURL for easy SSL configuration through the environment
  def get_json url
    Open3.popen3 *%W[curl -#L #{url}] do |_, stdout, stderr, thread|
      if thread.value.success?
        JSON.parse stdout.read
      else
        warn stderr.read
        raise 'cURL failure!'
      end
    end
  end

  def get_latest_version
    get_json(VERSIONS_URL)['latest']['release']
  end

  def server_jar_url version
    File.join DOWNLOAD_PREFIX_URL, version, 'minecraft_server.%s.jar' % version
  end

  def download url, gamedir
    raise 'Game directory %s does not exist!' % gamedir.inspect unless Dir.exists? gamedir

    path = File.join gamedir, 'jars', File.basename(url)

    if File.exists? path
      puts "Skipping download, #{path} already exists."
    else
      FileUtils.mkdir_p File.dirname(path)
      success = system 'curl', '-#L', '-o', path, url
      raise 'Download failed!' unless success
    end

    path
  end

  #
  # Gamedir management
  #

  # Executes block with cwd set to gamedir
  def locking_gamedir gamedir, &block
    lock = File.join gamedir, LOCKFILE

    if File.exists? lock
      raise "#{gamedir} is locked! Remove #{lock} if you are sure this is an error."
    else
      begin
        FileUtils.touch lock
        Dir.chdir gamedir do
          block.call
        end
      ensure
        FileUtils.rm_f lock
      end
    end
  end

  def maybe_readlink link, base_dir
    if File.exists? link
      raise "#{link} is not a symlink!" unless File.symlink? link
      File.expand_path File.readlink(link), base_dir
    end
  end

  def pathname path
    Pathname.new File.expand_path(path)
  end

  def relative_path_from dir, path
    pathname(path).relative_path_from(pathname dir).to_s
  end

  def world_namespace jar_path
    jar_path =~ OFFICIAL_JAR_REGEXP ? 'minecraft_server' : File.basename(jar_path, '.jar')
  end

  def gamedir_state gamedir
    %w[server.jar world].map do |link|
      maybe_readlink File.join(gamedir, link), gamedir
    end
  end

  def link_relative! link, base_dir, path
    if maybe_readlink(link, base_dir) != path
      FileUtils.rm_f link
      FileUtils.ln_s relative_path_from(base_dir, path), link
    end
  end

  # Manages the server.jar and world links
  def update_gamedir! gamedir, jar, world_name
    cur_jar, cur_world = gamedir_state gamedir

    jar = jar ? File.expand_path(jar) : cur_jar
    world_ns = world_namespace jar
    world_name = File.basename world_name || (jar == cur_jar && cur_world) || 'default'
    world = File.join gamedir, 'saves', world_ns, world_name

    locking_gamedir gamedir do
      if cur_jar != jar
        link_relative! 'server.jar', '.', jar
      end

      if cur_world != world
        FileUtils.mkdir_p world
        link_relative! 'world', '.', world
      end
    end
  end

  def print_gamedir_state! gamedir
    puts "GAMEDIR: %s\nJAR:     %s\nWORLD:   %s\n" % [
      File.expand_path(gamedir),
      *gamedir_state(gamedir)
    ]
  end

  #
  # RC Helpers
  #

  def spit file, buf
    File.open(file, 'w') { |f| f.write buf }
  end

  def fork_server_and_wait! gamedir, memory, opts = {}
    locking_gamedir gamedir do
      jar, world = gamedir_state '.'

      cmd = %W[java -Xmx#{memory}M -jar #{jar} nogui]

      begin
        pid = fork do
          unless opts[:debug]
            $stdin.reopen opts[:stdin] || '/dev/null'
            $stdout.reopen '/dev/null'
            $stderr.reopen '/dev/null'
            Process.setsid
          end
          exec *cmd
        end

        puts '[%d] %s' % [pid, cmd.join(' ')]
        print_gamedir_state! '.'

        [:TERM, :QUIT, :INT].each do |sig|
          trap(sig) { Process.kill sig, pid }
        end

        pidfile = File.join gamedir, PIDFILE
        spit pidfile, pid.to_s
        Process.wait pid
        FileUtils.rm_f pidfile
      end
    end
  end

  def have_rlwrap
    system '/bin/sh', '-c', 'command -v rlwrap >/dev/null 2>&1'
  end

  def kill pidfile, fifo
    pid = File.read(pidfile).to_i
    Process.kill 0, pid
    puts 'Sending SIGTERM to %d' % pid
    Process.kill :TERM, pid
    sleep 0.1 while Process.kill 0, pid rescue nil
  rescue Errno::ESRCH
    puts "No such process, removing #{pidfile}"
    FileUtils.rm_f pidfile
  rescue Errno::EPERM
    # Try writing to fifo instead
    if File.writable? fifo
      File.open(fifo, 'w') { |f| f.puts 'stop' }
      sleep 0.1 while File.exists? fifo
    else
      puts 'Insufficient permissions to kill process %d' % pid
    end
  end

  def with_fifo gamedir, &block
    path = File.join gamedir, FIFO
    system 'mkfifo', '--mode=0660', path
    fifo = File.open path, 'r+'
    block.call fifo
  ensure
    fifo.close
    FileUtils.rm_f path
  end

  #
  # RC methods
  #

  def start!
    update_gamedir! @gamedir, @jar, @world

    if @debug
      fork_server_and_wait! @gamedir, @memory, :debug => @debug
    else
      Process.detach fork {
        with_fifo @gamedir do |fifo|
          fork_server_and_wait! @gamedir, @memory, :stdin => fifo
        end
      }
    end
  end

  def stop!
    pidfile = File.join @gamedir, PIDFILE
    return unless File.exists? pidfile
    kill pidfile, File.join(@gamedir, FIFO)
  end

  def update!
    jar = @jar || download(server_jar_url(get_latest_version), @gamedir)
    update_gamedir! @gamedir, jar, @world
    print_gamedir_state! @gamedir
  end

  def start_repl!
    raise 'Minecraft server is not running!' unless File.exists? File.join(@gamedir, PIDFILE)

    File.open File.join(@gamedir, FIFO), 'w' do |fifo|
      begin
        fifo.sync = true
        log = IO.popen ['tail', '-fn100', File.join(@gamedir, 'logs/latest.log')]
        loop do
          (rd,), = select [log, $stdin]
          if rd == $stdin
            fifo.puts rd.gets("\n")
          else
            puts rd.gets
          end
        end
      rescue Interrupt
        puts 'Interrupt'
      ensure
        log.close
      end
    end
  end

  def run arguments = []
    args = parser.parse arguments
    abort parser.help unless args.size == 1

    case args.first
    when 'start'   then start!
    when 'stop'    then stop!
    when 'restart' then stop!; start!
    when 'update'  then update!
    when 'repl'
      if ENV['RLWRAP_MINECRAFT'] or ENV['_'] =~ /rlwrap\z/ or not have_rlwrap
        start_repl!
      else
        ENV['RLWRAP_MINECRAFT'] = '1'
        exec 'rlwrap', '-r', $0, *arguments
      end
    else
      abort parser.help
    end
  end
end

$0 = File.basename(__FILE__) and Minecraft.new.run ARGV if $0 == __FILE__
